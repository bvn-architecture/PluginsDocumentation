---
title:  "Push It"
date:   2017-04-28 19:00:00 +1100
permalink: #/docs/2017-04-28-PushIt
excerpt: "demo push it docs"
modified:
layout: "sample"
---

# Summary

Push it is meant to streamline the process of rapid plan layout development in Revit.
Revit has issues with:

  * Moving rooms
    * Moving rooms to different levels
    * Moving rooms around on a floor plate 
  * Model performance
    * A large number of rooms within a single model 
  * Data
    * Keeping track of which rooms have been placed in a model from a given schedule
    * Enforcing consistent naming and numbering schemes for rooms
    * Enforcing a consistent data structure

## Moving rooms 

The first couple of issues stem from the way rooms are created and there extent is defined in Revit. Rooms require walls or room bounding lines to define their extent. Any change in room location will require changes to those elements which is quite time consuming. 

In order to change the level location of a room it will actually need to be cut from the old level and paste to the new level. Revit internally assigns a new element ID to the room pasted, which means any associations to the old room via its element ID are lost.

## Model performance

Revit slows down considerably when a large number of rooms are present in the model. This is due to Revit evaluating all the time if a change to one room effects other rooms or properties of other objects (like doors) placed in rooms.

## Data

Keeping track of which rooms have been placed in the Revit model is challenging for large projects. Whilst the model can be pre populated with room data via 3rd party software this has some draw backs. 

* The current Revit user interface does not allow to sort or filter the list of unplaced rooms. This leads to a lot of scrolling up and down the list to get to a specific room.
* Checking for duplicate placement will need to be done via a Revit schedule. 
* It is hard to keep track of rooms which have been completely removed from the model intentionally or un-intentionally

Naming rooms consistently eg Store Linen vs Linen Store can be particularly hard to achieve especially when multiple models and team members are involved. Revit scheduling can help finding those inconsistencies but this is more a treating the symptoms rather than the cause approach.

Last but not least consistent data structures. Revit out of the box does not provide any ways to ensure that all relevant properties of a room have their values set in a consistent manner. 

# Push It (real good)!

Push it! aims at addressing the above issues in a two pronged approach: 
* Providing custom 'room' families to facilitate 
  * Rapid and easy layout development 
  * Easy and fast changes to layouts and design options
* Additional user interface in Revit to allow:
  * Sorting and filtering of rooms to be placed
  * provide user with direct feedback as to which rooms have been placed already
  * Populating given room properties with data
  * Updating room data during the development cycle 


## Custom 'Room' families

The approach outlined below has been successfully implemented on: 
- Northern Beaches Hospital - Competition with approx 2970 rooms in single Revit model placed
- Uni of South Australia Health Innovation Building - approx 750 rooms in single Revit model placed 
- Kai Tak Hospital Hong Kong - SD stage with a total of approx 8900 rooms modelled (distributed across 3 separate building models: 1265/1255/6380 )


### Shapes

These families come in varies shapes and use cases:

* Base Shapes (Revit Category Column):
	* SP-Room-Rectangle-Double-Door_8.rfa 
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-RECTANGLE-DOUBLE_DOOR.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-Rectangle_9.rfa 
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-RECTANGLE-SINGLE_DOOR.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-Rectangle_Bay_8.rfa 
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-RECTANGLE-BAY.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-Circular_Bay_8.rfa (currently this displays only a fill if area designed is over briefed area) 
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-CIRCLE-BAY.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-LShaped_8.rfa
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-L.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-TShaped_8.rfa
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-T.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* SP-Room-Angled_8.rfa
	![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-ANGLED.svg){:class="img-responsive"}{: height="400px" width="600px"}

Multiple rectangle families are available to reduce number of formulas otherwise required in a single Family. Tests have shown that this keeps Revit as responsive as possible.

* Specialty Rooms (Revit Category Column)
	* Bays
		* SP-Room-Bed-Bay-Chamfered_8.rfa
		* SP-Room-Bed-Bay-flex.rfa
		* SP-Room-Bed-Bay_8.rfa
		* SP-Room-Dialysis Chair_9.rfa
	* Bed Rooms
		* SP-Room-Bed-CutOut_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-STANDARD WITH CUTOUT.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Bed-CutOut_Ens_Square_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-WITH RECTANGLE ENS.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Bed-Rectangle_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-RECTANGLE.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Bed-Two_ENS_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-TWO ENS.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Bed_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-STANDARD.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Bed_Ens_Square_7
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-BED-WITH RECTANGLE ENS.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* En Suites
		* SP-Room-ENS-Square_8.rfa
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOMS-ENS-RECTANGLE.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-ENS_8.rfa
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-ENS-STANDARD.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-ENS_Double_8.rfa
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ROOM-ENS-DOUBLE.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* WC's
		* SP-Room-Patient-Toilet_Instance_Double.rfa
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/WC-DOUBLE.svg){:class="img-responsive"}{: height="400px" width="600px"}
		* SP-Room-Patient-Toilet_Instance_Single.rfa
		![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/WC-SINGLE.svg){:class="img-responsive"}{: height="400px" width="600px"}
	* Multi Storey
		* SP-Room-Lift_8.rfa
		* SP-Room-Riser_8.rfa
		* SP-Room-Stair_8.rfa
		* SP-Room-Stair_Nodeged_8.rfa
	* Other
		* SP-Room-Fire_8.rfa

* Misc Items (Revit Category Generic Model)
	* SP-Door-Double-Half_8.rfa
	* SP-Door-Double_8.rfa
	* SP-Door-Lift_8.rfa
	* SP-Door-Opening_8.rfa
	* SP-Door-Single_8.rfa
	* SP-Door-Sliding_8.rfa
	* SP-Door-Sliding_Single_8.rfa
	* SP-Window_8.rfa

Note: the number at the end refers to the version of the family. Ideally a project should use always families of the same version.

### Family Set-up

Initially these families started of as Generic Model families. Later on during the development of this system, they where changes to column families in order for them to be room bounding and therefore usable with proper Revit rooms if so required.
A side effect of this is that, with the exception of the families listed as multi storey families above, these families do not have a base or top level property but just a level property. Therefore when trying to schedule these families via a standard
Revit column schedule, no level data for base or top level will be shown. However if a multi-category schedule is used instead, the simple level property is available and contains data.

Proper column families where only used for lifts and risers for instance. Here the capability to define a top and bottom level is important to show a consistent core location across multiple floors.

Another initial goal was to set up the families in a way so they can display a simple line graphic with no wall thickness as well as a wall thickness. This was attempted via the Revit detail level of specific elements and nesting of multiple families within each column family set to show at certain detail levels only.
Each family contains two nested families:
	* Generic Model (visible in medium and fine detail) and modelled to inside face of walls
	* Detail Item (visible in coarse detail only) and modelled to centre line of wall

This was done to allow for colouring of rooms via filters. These filters can operate on the following properties:
	* SP_Department, 
	* SP_Subdepartment, 
	* Functional Group

When colouring rooms in views set to coarse detail level, the filter will need to be applied to columns.

However when colouring rooms in medium and fine detail level rather than colouring the column families itself, the filter should target the nested and shared Generic Model family instead. This allows to colour the background of a room and leaves items placed in a room, e.g. beds
white and not effected by the filter.

If no filter is applied, colour coding indicates how the designed area compares to briefed area:
	* red is under area
	* blue is over area
	* green is on area (within 1 % range)

![SP-Room-Bed-Rectangle_7]({{ site.baseurl }}/assets/Pushit/ColourByArea.svg){:class="img-responsive"}{: height="600px" width="900px"}

The family instance property SP_Area_Designed shows the area of the 'room' to centre line of wall. Its value is calculated on the fly.

In general, shared parameters are used to drive size and SOA properties. This is to allow for swapping out of family shapes but maintaining, at the same time, size and other properties, e.g. room name for instance.

The build in label is meant to be used for modelling support only. On plot views, a separate tag should be used and the build in label be switched off via a filter. 

The following Revit categories are used:

* Column

| Category             | Use                                                                  |
|----------------------|----------------------------------------------------------------------|
| SP-Room-Separation   | Bay families or other families where walls can be switched on or off |
| SP-Walls             | Category of the wall extrusion                                       |
| SP-Walls-Centre-Line | Detail lines representing the centre of walls                        |

* Detail Items

| Category         | Use                                                                                        |
|------------------|--------------------------------------------------------------------------------------------|
| SP-Area-Outline  | Filled region Boundary.Only visible in Coarse detail.                                      |
| SP-Door-Detailed | Shows Leaf thickness. Used in nested detail component of Single door,                       |
| SP-Door-Simple   | Shows simplified door ( no leaf thickness). Used in nested detail component of Single door |
| SP-Lift          | Detail lines of lift car graphic                                                                                    |
| SP-Stair-Outline | Detail lines of stair detail family used in Stair family                                   |
| SP-Stair-Tread   | Detail lines of stair detail family used in Stair family                                   |

* Generic Models

| Category             | Use                                                                                                                                                 |
|----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| SP-Area-Outline      | Category of extrusions modeled to inside face of walls. Used to show above ,below, match of briefed area vs designed area in medium and fine detail |
| SP-Door-Detailed     | Shows detail of door in generic model not using a nested detail for this purpose. (e.g.Lift door)                                                   |
| SP-Door-Infill       | Category of extrusion used to show opening in wall where door is                                                                                    |
| SP-Door-Simple       | Shows detail of door in generic model not using a nested detail for this purpose. (e.g.Lift door)                                                   |
| SP-FFE-CURTAIN       | ???                                                                                                                                                 |
| SP-FFE-Outlines      | Used in some of the nested equipment (e.g. wash hand basins to show outline of equipment at coarse detail level)                                     |
| SP-Walls             | ???                                                                                                                                                 |
| SP-Walls-Centre Line | Used in door family required to be rotated only (En-suite with chamfer)                                                                             |
| SP-Windows-Simple    | Symbolic lines used in window family.                                                                                                               |

The following shared parameters are used:

| UID                                  | NAME                        | DATATYPE | DESCRIPTION                                                                                | 
|--------------------------------------|-----------------------------|----------|--------------------------------------------------------------------------------------------| 
| c1465816-66b9-426b-9300-33dff4141487 | Area_Briefed                | AREA     | The area briefed for this room.                                                            | 
| acac3c63-7165-4dd9-b648-c086e0ddde48 | AREA_COLOUR_BVN             | TEXT     | Used to colour Revit areas or mass floors independent of their department value.           | 
| f67bfc53-300b-4f74-a3ed-4f0b6b128a31 | DEPTH_MASS                  | LENGTH   | Depth of department mass family.                                                           | 
| 7eee1367-20d8-4699-aa60-edc3ccf67a38 | DISTANCE FROM EDGE 1        | LENGTH   |                                                                                            | 
| 66e7576f-f992-41cd-b895-4ef064cb5481 | DISTANCE FROM EDGE 2        | LENGTH   |                                                                                            | 
| 7a4c7a78-509e-4b3b-b08c-34793cc52bb2 | DISTANCE FROM EDGE 3        | LENGTH   |                                                                                            | 
| 337ab49f-9bfd-441e-9508-203194223dfd | Functional_Group            | TEXT     | 3rd level of room grouping                                                                 | 
| eb9e31cc-2f0f-4330-bdec-b2013b9a6662 | HEIGHT_MASS                 | LENGTH   | Height of department mass family.                                                          | 
| b14b54da-4d40-444c-9e7a-98097ee78356 | Room_Ceiling_Height_HFBS    | LENGTH   | Height of Push It rooms                                                                    | 
| 7b118e21-ef5b-42bd-8d70-61bc6c78b7ff | Room_Label                  | TEXT     | Shortened room name. For 1 to 200 drawings.                                                | 
| d05960b3-e08e-4ad3-99b7-0c3d8377adad | SP_Area_Designed            | AREA     | The actual designed (modelled) area of a room.                                             | 
| 698eb307-bb37-4d54-90d5-0f4ae0bc819a | SP_Brief_Status             | TEXT     | Add 'added' if room is not in SOA otherwise leave blank.                                   | 
| e4c6fd5c-49f6-4314-9964-d9396185b410 | SP_Ceiling_Height           | LENGTH   | Height of Push It rooms                                                                    | 
| 376b5d3b-88bf-4dd5-845b-0e82bcb3cb6a | SP_Comments                 | TEXT     | Any comments made in SOA. (Could be 'Added by client' etc)                                 | 
| ab063eac-3f67-403c-9ab2-7b3a68ae976d | SP_Department               | TEXT     | 1st level of room grouping.                                                                | 
| 878cd562-2038-453a-9d23-29fc3e039ba4 | SP_Depth                    | LENGTH   | The depth of a room.                                                                       | 
| 94a309f1-485b-4730-95a6-e16e053b0f7f | SP_Door_1                   | YESNO    | Door 1 on or off switch                                                                    | 
| 1fdee2b2-6e8f-4ff2-a92e-1e177bac75d4 | SP_Door_1_In_To_Room        | YESNO    | If checked Door 1 opens into the room. Otherswise it will open out of the room           | 
| d10f2602-07b5-4fa1-ba53-898830a89f42 | SP_Door_1_Offset_Hinge_Side | LENGTH   | Offset of the door hinge side from the nearest wall centre.                                | 
| 6aed92c9-f867-4e5e-8e3a-062caba29075 | SP_Door_3                   | YESNO    | Door 3 on or off switch                                                                    | 
| f6596632-40bd-4274-b4cd-1c95317b34ab | SP_Door_3_In_To_Room        | YESNO    | If checked Door 3 opens into the room. Otherswise it will open out of the room           | 
| a29ddde9-af49-4f0f-aae8-67b0187e9cc7 | SP_Door_3_Offset_Hinge_Side | LENGTH   | Offset of the door hinge side from the nearest wall centre.                                | 
| 1b8eaff9-380c-4229-aee5-a09a188e3eff | SP_Material_Walls           | MATERIAL | Material applied to wall extrusion.                                                        | 
| 32298a1e-ef2a-4d9a-90e7-3c51627c2f8b | Sp_Room_Name                | TEXT     | The room name.                                                                             | 
| 9469de6d-f1b5-4ca8-91c6-dfeb2bdefb88 | SP_Room_Number              | TEXT     | The room number.                                                                           | 
| 8bc86927-d27f-45b2-a63a-058c67fcebdb | SP_Room_Number_Parent       | TEXT     | The room number as briefed (if different to the room number used in model)                 | 
| afac4144-67d3-4454-b324-74b93953bb48 | SP_Subdepartment            | TEXT     | 2nd level of room grouping                                                                 | 
| 31b47f22-8de5-4360-9e70-5554762cedd7 | SP_Subdepartment_Label      | TEXT     | Editable label of a sub department. Used for drawing annotation                            | 
| 5e103884-1425-4596-b985-7b609565b9d3 | Sp_Unique_Id                | TEXT     | The unique identifier of a room element. (not required if Sp_Room_Number is always unique) | 
| 5002fb59-c053-49bf-801e-bbc7dfd8ab23 | SP_Width                    | LENGTH   | The width of a room                                                                        | 
| c94fb6a3-ccf7-4ff0-a3df-40112ce36506 | SP_Zone                     | TEXT     | Location (Building / campus) of a room.                                                    | 
| 2d5fcb72-ae86-443e-b217-e08deb07d046 | Subdepartment(depreceated)  | TEXT     | Replaced by SP_Department parameter. Still in use in 'Get a room template')                | 
| d1cc1691-633f-448e-b4c3-e07e23a24b72 | WIDTH_MASS                  | LENGTH   | Width of department mass family.                                                           | 


### Family manipulation

The size of a room can be manipulated by either:
	* entering values into Sp_Width or SP_Depth parameters
	* aligning the centre line of wall to stretch a room ( Revit glitch: sometimes these rooms start to stretch AND move at the same time. This behaviour starts and stops without any apparent reason )
	* aligning the outer or inner face of wall to change room location ( exception of risers where the aligning to inner face of wall will stretch the family)
	* selecting the level property to move rooms up and down the building (note: if host is not a Revit Level then host need to be changed to a Revit level via 'pick new host' command)
	* Ceiling height property drives the height of all the SP_Room families but the multi storey ones listed above

Most room families have doors included. Doors location along wall can be changed as well as the swing direction, which can be flipped to go in or out of room. If an additional door is required you can use of the SP-Door families

With the exception of the Rectangle based families, all shapes can switch off their walls if required, to function as a bay only.

### Irregular Shapes

Irregular shapes are supported through the BVN 'Get A Room' Revit plugin. This requires the user to draw the outline of the required room or rooms, including its (their) wall thickness, as filled regions first. Once those regions have been converted into rooms, Push It can be used to populate them with SOA data.

The rooms created this way are static in size and can not be amended via Width or Depth properties. Any change to the shape of the room will require a redraw which makes this a fairly slow process. 

### Drawing Set up

On previous projects, BVN was required to show some massing and stacking diagrams as well as 1 to 200 floor plans. Since we used Revit mass objects to do the stacking diagrams, it was decided to use associated mass floors to colour the overall department boundaries on the 1 to 200 floor plans. This worked fine in Revit 2014 but the latest project under taken in Revit 2017 showed major glitches in Revit, when trying to print to PDF. On a regular basis mass floors used to colour areas would not print when using vector printing but printed just fine when switching to raster printing.

After some testing the solution adopted was to use a stacked views on sheet approach: The bottom (first placed view) would contain mass floors and standard floors only. The top view would contain the room elements and everything else making up the plot sheet.

This is certainly not an ideal scenario from an end user perspective. Trials with area plans where successfully undertaken at the Hong Kong Kai Tak project but due to the time frame not implemented across the entire project.

### Area Calculation

On a regular basis projects are required to provide area schedules as a measure how efficient a proposed layout is. These area schedules are usually broken down in net and gross area. In this scenario net area is identical to the area of the briefed rooms. Gross area is the briefed area plus any circulation and plant space. Often this is expressed as a percentage figure of the net area.

When using custom rooms families only briefed rooms will be placed. There are (at least) two options to model the gross area:

* mass floors by department
* area plans by department

Each option requires an element to be modelled, and updated with any layout changes, which covers the extent of an entire department or sub department. The circulation area of a specific department is than the gross area minus the net area retrieved from the room families of this department. 

Area calculations themselves can done in Excel in form of data links to schedules exported from Revit.


## Push It (Real Good)! (Revit Add-in)

![Push It button under the Revit BVN Tools tab]({{ site.baseurl }}\assets\Pushit\Tab-SpatialPlanning.png){:class="img-responsive"}{: height="95px" width="152px"}

Push It Real Good is a Revit add-in developed in-house to manage, track and synchronize Schedule of Accommodation data between an Excel (or CSV file) and one or more Revit models. (Trivia: its name derives from the Salt 'n Pepa hit single and the idea that it's all about "pushing" data into the Revit model.)

Traditionally, Schedule of Accommodation (SOA) information has been managed in a fairly unstructured manner using Excel. Users would visually inspect the SOA spreadsheet and manually enter the room data into corresponding Revit Room's parameters in the Revit model. This of course leads to wasted effort ensuring that the data in the SOA and in the Revit model are in sync in terms of briefed Room data and areas.

It should be noted that relatively recently, the Drofus software tool has entered the market to solve this problem by enabling bi-directional synchronization of SOA data between an online database (with a web UI front end) and one or more Revit models. Unfortunately, Drofus (as of May 2017) doesn't support synchronizing this data to Revit model elements other than Rooms. So although Drofus solves most of the problem that Push It solves (and solves additional problems), it falls short fitting into the Spatial Planning workflow outlined in this document.

![The main window of Push It Real Good!]({{ site.baseurl }}\assets\Pushit\PushIt-Window.png){:class="img-responsive"}{: height="790px" width="1136px"}

The main Push It window displays a list of SOA items. Each row describes the set of values corresponding to an SOA item. When an SOA item is 'pushed' to a model element these values are populated into the model element's parameters. Each column's heading (other than the two rightmost columns) describes the name of the Revit parameter it corresponds to. The leftmost column serves as the unique ID for the SOA items. This column would typically represent SOA item room numbers. Note that Push It will not load an SOA whose item IDs are not unique. Regarding the two rightmost columns, the 'Placed' column indicates the number of model elements whose parameter data matches that SOA item exactly. The 'Status' column indicates whether an SOA item is still a part of the project SOA / brief (ACTIVE) or if it has been removed (DELETED).

The current state of each SOA item in terms of whether it exists in the Revit model is also indicated by the color of its row. A white row indicates that item does NOT yet exist in the model (at least in the current phase and design option configuration, see further below for details). A grey row indicates that the item occurs in the model exactly once. A red row indicates that the item occurs more than once in the model, which is considered to be an error. A line / strike-through appearing across a row indicates that this item is no longer active in the SOA (i.e. it is DELETED).

As a first step to using Push It in the active Revit project, the SOA data must first be loaded into the UI. Before doing this, select a Revit category from the 'Element Category' dropdown in the lower lefthand corner. Revit will consider model element instances of the selected category when comparing the SOA and populating the model. Next click the 'Load SOA...' button in the lower lefthand corner to open up a dialog for browsing to the desired SOA data txt file. (The steps to prepare this SOA txt file are described later on.) Once this file is chosen, Push It loads the data into the UI and compares this data against the Revit model data to see what SOA items exist in the model already. As Push It is loading the data, it will check that the item IDs (first column) are unique and that the data in each row is of the appropriate form for the corresponding Revit parameter. It will show an error message if either of these requirements are not met.

NOTE: If the currently active view is a drafting view or schedule, Push It cannot compare the SOA to the model due to the lack of Phasing and Design Option information in such views. To resolve this issue, switch to a plan view and click the 'Refresh' button to refresh the SOA comparison with the model.

To 'push' an SOA item into a model element of the chosen category, first select the SOA item's row in the Push It window, then select an instance of the desired model element in the active Revit view. Click the 'Push It' button to populate the chosen model element with the SOA item data. If successful, the SOA item row will change color from white to grey and the 'Placed' column will indicate the new number of instances of that item placed in the model. If this operation fails, an error is displayed. Typical reasons for failing includes the SOA item having already been 'pushed', the model element not existing in the current view's phase and / or Design option(s), or the model element being of the wrong category.

NOTE: when pushing an SOA item into a model element, this overwrites any existing parameter data for the parameters described in the SOA. If the target model element already contains / matches another SOA item, that other SOA item will have its 'Placed' count reduced by 1, potentially becoming 'unpushed' again as a result.

To clear an SOA item from the model, either select its row in the Push It window OR select the model element in a view, click the 'Clear...' button. In the dialog box that appears, choose either to clear the SOA item based on the selected row in the SOA window or based on the selected model element in the active view. Note that when clearing an SOA item by the selected row, this will clear all model elements' data that matches that SOA item. By contrast, when clearing an SOA item by the selected model element, this will only clear that model element's SOA data. Note that in the latter case, if the corresponding SOA item still has other matching model elements, it will still appear 'pushed' and have a placed count larger than 0.

In order to help manage a large SOA data set, Push It is able to filter the SOA list by any of the columns' values. To do this, select a column name from the 'Filter by' dropdown in the lower righthand corner. Then to filter by a specific value, choose from the list of values in the second dropdown (to the right of the first). Depending on the size of the SOA, it may take a few moments to filter the SOA list down to just those elements matching the filtering criteria.

To see the model element(s) corresponding to a pushed SOA item, double-click its row. This will show and select the Revit model element(s) in a suitable view.


When switching Revit views, remember to click the 'Refresh' button in the SOA window to 

ORDER TO COVER THINGS IN (THESE ARE NOT THE HEADINGS):
- Extra details about pushing (view with design option / phase required, duplicates, pushing and one comes back, etc.)
- Refresh
- Push Revised
- Audit
- SOA file structure. (including STATUS feature, guids, itemizing, etc.)
- SOA extraction process(es).
- Details about Design option handling.
- Room for improvements (boy are there many)
  - Show designed area in the interface (read from Room data on refresh).
  - Push revised - have some output (txt or log etc) showing what has been changed.
  - Link file support
  - Database backend
  - DataGridView is too slow for large amount of rows. Possibly look at better performing GUI component.

## Get A Room (Revit Add-in)

![Get A Room button under the Revit BVN Tools tab]({{ site.baseurl }}\assets\Pushit\Tab-SpatialPlanning.png){:class="img-responsive"}{: height="95px" width="152px"}

Get A Room is a Revit add-in developed in-house that is designed to work alongside the Push It addin. Its purpose is to create custom Room family shapes similar to the standard configurations of families described earlier in this document, but with a somewhat more limited set of functionality (e.g. such custom Room families are not resizable).

